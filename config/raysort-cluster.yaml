### Variables: i3.2xlarge, 1.0, 30064771072, 16, 16, [('/dev/nvme0n1', '/mnt/nvme0')], \"/mnt/nvme0/tmp/ray\", [], 500, i3.2xlarge

cluster_name: raysort-cluster
max_workers: 16

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-west-2
    availability_zone: us-west-2b
    use_internal_ips: no
    cache_stopped_nodes: no

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
    ssh_private_key: ~/.ssh/ray-autoscaler_us-west-2.pem

# Tell the autoscaler the allowed node types and the resources they provide.
# The key is the name of the node type, which is just for debugging purposes.
# The node config specifies the launch config and physical instance type.
available_node_types:
    ray.head.default:
        min_workers: 0
        max_workers: 0
        resources:
            CPU: 0
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: i3.2xlarge
            ImageId: ami-0cc7b9f3e255deb54
            KeyName: ray-autoscaler_us-west-2
            Placement:
                GroupName: raysort-pg

    ray.worker.default:
        min_workers: 16
        max_workers: 16
        resources:
            worker:i3.2xlarge: 1
            worker: 1
        node_config:
            InstanceType: i3.2xlarge
            ImageId: ami-0cc7b9f3e255deb54
            KeyName: ray-autoscaler_us-west-2
            Placement:
                GroupName: raysort-pg
            InstanceMarketOptions:
                MarketType: spot
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 100
            

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
    "/home/ubuntu/.aws": "/home/ubuntu/.aws",
    "/tmp/raydev": "/home/ubuntu/ray",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
    - "**/.git"
    - "**/.git/**"
    - "**/node_modules"
    - "**/node_modules/**"

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
    - ".rsyncignore"

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands:


    - test -b /dev/nvme0n1 && sudo mkfs -F -t ext4 /dev/nvme0n1 || true
    - sudo mkdir -p /mnt/nvme0
    - test -b /dev/nvme0n1 && sudo mount /dev/nvme0n1 /mnt/nvme0 || true
    - sudo chmod 777 /mnt/nvme0



# List of shell commands to run to set up nodes.
setup_commands:
    - sudo bash -c 'rm -rf /etc/security/limits.d; echo "* soft nofile 65535" >> /etc/security/limits.conf; echo "* hard nofile 65535" >> /etc/security/limits.conf;'
    - conda activate base
    - find /home/ubuntu/miniconda3/lib/python3.9/site-packages/ray -maxdepth 1 -type l -delete
    - pip install --force-reinstall https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-2.0.0.dev0-cp39-cp39-manylinux2014_x86_64.whl
    - pip install -U -r /tmp/raydev/python/ray/experimental/raysort/requirements.txt
    - python /tmp/raydev/python/ray/setup-dev.py -y
    - cd /tmp/raydev/python/ray/experimental/raysort/sortlib && python setup.py build_ext --inplace
    - mkdir -p /mnt/nvme0/tmp/ray

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - >
        RAY_SCHEDULER_SPREAD_THRESHOLD=0
        ray start --head --port=6379
        --autoscaling-config=~/ray_bootstrap_config.yaml
        --object-manager-port=8076
        --metrics-export-port=8090
        --system-config='{"max_io_workers":8,"object_spilling_threshold":1.0,"object_spilling_config":"{\"type\":\"filesystem\",\"params\":{\"directory_path\":[\"/mnt/nvme0/tmp/ray\"]}}"}'
        --object-store-memory=30064771072 
    - /tmp/raydev/python/ray/experimental/raysort/bin/prometheus/prometheus --config.file=/tmp/raydev/python/ray/experimental/raysort/config/prometheus.yml &
    - /tmp/raydev/python/ray/experimental/raysort/bin/node_exporter/node_exporter --web.listen-address 0.0.0.0:8091 &
    # - /tmp/raydev/python/ray/experimental/raysort/bin/jaeger/jaeger-all-in-one &

# --plasma-directory=/mnt/nvme0/tmp/ray
# --tracing-startup-hook=ray.util.tracing.setup_jaeger_tracing:setup_tracing

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - >
        RAY_SCHEDULER_SPREAD_THRESHOLD=0
        ray start --address=$RAY_HEAD_IP:6379
        --object-manager-port=8076
        --metrics-export-port=8090
        --object-store-memory=30064771072 
    - /tmp/raydev/python/ray/experimental/raysort/bin/node_exporter/node_exporter --web.listen-address 0.0.0.0:8091 &